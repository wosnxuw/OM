encapsulated package list_use
"
  file:        list_use.mo
  package:     list_use
  description: Generated by Susan.
"

public import Tpl;

protected import hello;

protected function lm_1
  input Tpl.Text in_txt;
  input list<Integer> in_items;

  output Tpl.Text out_txt;
algorithm
  out_txt :=
  match(in_txt, in_items)
    local
      Tpl.Text txt;
      list<Integer> rest;
      Integer i_it;

    case ( txt,
           {} )
      then txt;

    case ( txt,
           i_it :: rest )
      equation
        txt = Tpl.writeStr(txt, intString(i_it));
        txt = lm_1(txt, rest);
      then txt;
  end match;
end lm_1;

protected function smf_2
  input Tpl.Text in_txt;
  input Tpl.Text in_it;

  output Tpl.Text out_txt;
algorithm
  out_txt :=
  match(in_txt, in_it)
    local
      Tpl.Text txt;
      Tpl.Text i_item;

    case ( txt,
           i_item )
      equation
        txt = Tpl.writeText(txt, i_item);
        txt = Tpl.writeTok(txt, Tpl.ST_STRING("1"));
      then txt;
  end match;
end smf_2;

public function list_1
  input Tpl.Text txt;
  input list<Integer> a_li;

  output Tpl.Text out_txt;
protected
  Tpl.Text txt_0;
  Tpl.Text l_a;
algorithm
  l_a := hello.tp(Tpl.emptyTxt, 10.0);
  txt_0 := lm_1(Tpl.emptyTxt, a_li);
  out_txt := smf_2(txt, txt_0);
end list_1;

protected function lm_4
  input Tpl.Text in_txt;
  input list<String> in_items;

  output Tpl.Text out_txt;
algorithm
  out_txt :=
  match(in_txt, in_items)
    local
      Tpl.Text txt;
      list<String> rest;
      String i_name;

    case ( txt,
           {} )
      then txt;

    case ( txt,
           i_name :: rest )
      equation
        txt = Tpl.writeTok(txt, Tpl.ST_STRING("xxx_"));
        txt = Tpl.writeStr(txt, i_name);
        txt = Tpl.nextIter(txt);
        txt = lm_4(txt, rest);
      then txt;
  end match;
end lm_4;

protected function lm_5
  input Tpl.Text in_txt;
  input list<String> in_items;

  output Tpl.Text out_txt;
algorithm
  out_txt :=
  match(in_txt, in_items)
    local
      Tpl.Text txt;
      list<String> rest;
      String i_name;

    case ( txt,
           {} )
      then txt;

    case ( txt,
           i_name :: rest )
      equation
        txt = Tpl.writeTok(txt, Tpl.ST_STRING("Mr."));
        txt = Tpl.writeStr(txt, i_name);
        txt = Tpl.writeTok(txt, Tpl.ST_STRING(" "));
        txt = Tpl.nextIter(txt);
        txt = lm_5(txt, rest);
      then txt;
  end match;
end lm_5;

public function list_2
  input Tpl.Text txt;
  input list<String> a_names;

  output Tpl.Text out_txt;
protected
  Tpl.Text l_xxx__name;
algorithm
  l_xxx__name := Tpl.pushIter(Tpl.emptyTxt, Tpl.ITER_OPTIONS(0, NONE(), SOME(Tpl.ST_STRING(", ")), 0, 0, Tpl.ST_NEW_LINE(), 0, Tpl.ST_NEW_LINE()));
  l_xxx__name := lm_4(l_xxx__name, a_names);
  l_xxx__name := Tpl.popIter(l_xxx__name);
  out_txt := Tpl.writeTok(txt, Tpl.ST_STRING("Hello "));
  out_txt := Tpl.pushIter(out_txt, Tpl.ITER_OPTIONS(0, NONE(), SOME(Tpl.ST_STRING(", ")), 0, 0, Tpl.ST_NEW_LINE(), 0, Tpl.ST_NEW_LINE()));
  out_txt := lm_5(out_txt, a_names);
  out_txt := Tpl.popIter(out_txt);
end list_2;

annotation(__OpenModelica_generator="Susan");
end list_use;